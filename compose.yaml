services:

  postgres:
    image: postgres:17.2
    container_name: postgres-provinces
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: mydb
    volumes:
      - /home/atf/db/wealthofnation-postgres:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:7.4.2
    container_name: redis-server
    command: redis-server
    restart: always
    volumes:
      - redis:/var/lib/redis
      - redis-config:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - ops
      - backend

  # use "redis:6379" ass connection string to redis
  redis-insight:
    image: redis/redisinsight:2.66
    container_name: redis-insight
    ports:
      - "5540:5540"
    networks:
      - ops

#  proveditor:
#    build: .
#    container_name: proveditor
#    ports:
#      - "5077:8080"
#    depends_on:
#      - postgres
#    networks:
#      - backend

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
#      - "5077:5077"
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
      - ./prometheus/alertmanager/rules.yml:/etc/prometheus/rules.yml
    networks:
      - backend
      - ops
#    depends_on:
#      - proveditor
    extra_hosts:
      - host.docker.internal:host-gateway
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=pass
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning/datasources
    networks:
      - ops
    depends_on:
      - prometheus
  
  # Monitoring Your Host Environment
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - ops

  # Monitoring Your Docker Environment
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
    networks:
      - ops
    deploy:
      mode: global

  alert-manager:
    image: prom/alertmanager
    volumes:
      - "./promethesu/alertmanager/alertmanager.yml:/alertmanager/alertmanager.yml"
    networks:
      - ops
    ports:
      - "9093:9093"

volumes:
  prom_data: {}
  grafana-storage: {}
  redis: {}
  redis-config: {}

networks:
  ops:
  backend:
  frontend:

# we probably need to put Promtehus and Grafana tohether in one network !